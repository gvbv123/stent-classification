# ====== Global Default Configuration ======
OUTPUT:
  ROOT: "${OUTPUT_PATH}/9yue9ri"                # Experiment root directory
  RUN_NAME: "baseline"                          # Semantic name, sub-configurations will override this
  USE_TIMESTAMP: true                           # Generate timestamp subdirectory on every run
  TIMESTAMP_FMT: "%Y%m%d-%H%M%S"                # Timestamp format: 20250909-2142

DATA:
  TRAIN:
    IMAGE_DIR: "${DATA_PATH}/train/images"      # Path to training images
    MASK_DIR:  "${DATA_PATH}/train/masks"       # Path to training masks
    LABEL_CSV: "${DATA_PATH}/train/label.csv"   # Path to training labels
  TEST:
    IMAGE_DIR: "${DATA_PATH}/test/images"       # Path to testing images
    MASK_DIR:  "${DATA_PATH}/test/masks"        # Path to testing masks
    LABEL_CSV: "${DATA_PATH}/test/label.csv"    # Path to testing labels
  SPLITS:
    FOLDS: 5
    FIXED_SPLIT_JSON: "splits/train_val_test_seed2025.json"  # 5-fold split within training domain
    EXTERNAL_IDS:     "splits/external_test_ids.txt"         # External 50 cases' ID list
  MASK:
    BINARY_NORM: true  # Normalize 0/255 to 0/1 when reading

INPUT:
  MODE: "mask_concat"        # ["full", "mask_concat"]
  IMG_SIZE: 256              # Default: 256; supports 384/512
  CHANNELS: 2                # full=1, mask_concat=2

PREPROCESS:
  CLIP_PERCENTILES: [1.0, 99.0]   # Clip values from p1 to p99
  SCALE_TO_01: true               # Scale to [0,1] by dividing by 255
  NORM: "zscore_dataset"          # Normalize using training dataset mean/std
  NORM_STATS_FROM: "train_only"   # Calculate stats from the training set only

AUG:
  LEVEL: "light"      # ["light", "strong", "none"]
  # light
  ROT_DEG: 7
  TRANS_SLIDE: 0.05
  SCALE_RANGE: [0.95, 1.05]
  BRIGHTNESS: 0.10
  CONTRAST: 0.10
  GAMMA: 0.10
  MOTION_BLUR_PROB: 0.10
  CLAHE_PROB: 0.20
  # strong (when LEVEL="strong", use the following settings)
  STRONG:
    ROT_DEG: 10
    TRANS_SLIDE: 0.08
    SCALE_RANGE: [0.90, 1.10]
    BRIGHTNESS: 0.20
    CONTRAST: 0.20
    GAMMA: 0.20
    MOTION_BLUR_PROB: 0.20
    CLAHE_PROB: 0.30

MODEL:
  BACKBONE: "efficientnet_b3"     # Available models: resnet18 / convnext_tiny / densenet121 / swin_tiny / efficientnet_b0 / efficientnet_b2 / efficientnet_b3
  PRETRAINED: false
  CKPT_PATH: "${MODEL_PATH}/efficientnet_b320250912-161910/runs/best.ckpt"   # Leave empty or specify absolute path
  DROPOUT: 0.2

LOSS:
  TYPE: "bce_posweight"           # Available options: "focal"
  FOCAL_GAMMA: 2.0
  FOCAL_ALPHA: null               # If using focal, set between 0.25~0.5

OPTIM:
  OPTIMIZER: "adamw"
  LR: 0.0003
  WEIGHT_DECAY: 0.0001
  SCHEDULER: "steplr"             # Available options: "steplr", "cosine"
  WARMUP_EPOCHS: 3
  STEPLR_STEP: 10
  STEPLR_GAMMA: 0.1

TRAIN:
  EPOCHS: 100
  BATCH_SIZE: 16
  MIXED_PRECISION: true
  GRAD_CLIP_NORM: 1.0
  EARLY_STOP_METRIC: "val_auc"
  EARLY_STOP_PATIENCE: 10
  SEED: 2025                     # For multiple random seeds, can rerun with 2023/2024

THRESHOLD:
  SELECTION: "youden"            # ["youden", "max_f1", "fixed_0.5"]
  FIXED: 0.5

STATS:
  AUC_CI: "delong"               # Main paper: DeLong test
  BOOTSTRAP_ITERS: 2000          
  BOOTSTRAP_STRATIFY: ["label"]

DCA:
  EXPORT_CSV: true               
  THRESH_MIN: 0.05
  THRESH_MAX: 0.60
  THRESH_STEP: 0.01

XAI:
  ENABLE: true
  TARGET_LAYER:
    resnet18: "layer4[-1].conv2"
    efficientnet_b0: "features[-1]"
    efficientnet_b2: "features[-1]"    
    efficientnet_b3: "features[-1]"    
    convnext_tiny: "features[-1]"
    densenet121: "features.denseblock4"
    swin_tiny: "attn_rollout"
  N_SAMPLES: {tp: 3, tn: 3, fn: 2, fp: 1}
  ROI_ENERGY: true
